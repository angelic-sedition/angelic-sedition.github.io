<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nocturnal Artifice]]></title>
  <link href="http://angelic-sedition.github.io/atom.xml" rel="self"/>
  <link href="http://angelic-sedition.github.io/"/>
  <updated>2015-09-08T18:27:15-04:00</updated>
  <id>http://angelic-sedition.github.io/</id>
  <author>
    <name><![CDATA[Lit Wakefield]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A More Evil Helm]]></title>
    <link href="http://angelic-sedition.github.io/blog/2015/02/03/a-more-evil-helm/"/>
    <updated>2015-02-03T12:44:40-05:00</updated>
    <id>http://angelic-sedition.github.io/blog/2015/02/03/a-more-evil-helm</id>
    <content type="html"><![CDATA[<h2>Modes, Submodes, States, and Now Hydras</h2>

<p>The <a href="https://github.com/abo-abo/hydra">hydra</a> package for emacs basically provides an extremely convenient way to create custom, persistent states where single keys will have a different effect than they normally would. The point is the same as that behind modal editing. If you&rsquo;re going to be performing multiple related actions in a sequence, it is more efficient to enter a state where you can execute those actions using only single keys.</p>

<p>I use the word &ldquo;state&rdquo; because the word &ldquo;mode&rdquo; has a very different different meaning in emacs (kind of like &ldquo;yank&rdquo; does). The equivalent of a vim mode in emacs is basically an evil state (using the <a href="https://gitorious.org/evil/pages/Home">evil plugin</a>). The equivalent of a <a href="http://www.vim.org/scripts/script.php?script_id=2467">vim-submode</a> would be a hydra. There have already been evil plugins such as <a href="https://github.com/syl20bnr/evil-lisp-state">evil-lisp-state</a> and code in spacemacs that create mini-states for more specific tasks, but hydra makes the creation of these much simpler.</p>

<p>A commonly given example of when one might use a hydra is when repeating an action over and over, such as scrolling or zooming. However, it&rsquo;s generally simpler to just use the dot operator for repeating single actions. A better one would be the <a href="http://oremacs.com/2015/02/03/one-hydra-two-hydra/">example</a> given by Oleh Krehel (hydra&rsquo;s author) and bcarell for switching between splits.</p>

<p>Hydra has other convenience features, such as allowing for help text for each key or &ldquo;head&rdquo; in the hydra to be printed in the echo area. It does everything one would initially hope for and allows for global hydras as well as hydras in specific major modes. It even makes a &ldquo;color&rdquo; distinction where a head with the color blue will exit the state while those that are red (default) will not.</p>

<h2>A Hydra to Make Helm More Like Unite</h2>

<p><a href="https://github.com/emacs-helm/helm">Helm</a> is pretty much the emacs equivalent of <a href="https://github.com/Shougo/unite.vim">unite</a> except even more integrated. One thing I sometimes miss when using Helm is the ability to switch from <code>insert</code> to <code>normal</code> to do things like mark or move between candidates. I originally created mini-states using the same method <code>evil-lisp-state</code> uses. It works, but it&rsquo;s ugly, long (>60 lines), and you have to define a new evil state each time. Spacemacs has a more simple way to do things if you want to extract it, but I prefer hydra. With hydra there&rsquo;s no evil involved, and it&rsquo;s as easy as this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defhydra helm-like-unite ()
</span><span class='line'>  "vim movement"
</span><span class='line'>  ("?" helm-help "help")
</span><span class='line'>  ("&lt;escape&gt;" keyboard-escape-quit "exit")
</span><span class='line'>  ("&lt;SPC&gt;" helm-toggle-visible-mark "mark")
</span><span class='line'>  ("a" helm-toggle-all-marks "(un)mark all")
</span><span class='line'>  ;; not sure if there's a better way to do this
</span><span class='line'>  ("/" (lambda ()
</span><span class='line'>          (interactive)
</span><span class='line'>          (execute-kbd-macro [?\C-s]))
</span><span class='line'>       "search")
</span><span class='line'>  ("v" helm-execute-persistent-action)
</span><span class='line'>  ("g" helm-beginning-of-buffer "top")
</span><span class='line'>  ("G" helm-end-of-buffer "bottom")
</span><span class='line'>  ("j" helm-next-line "down")
</span><span class='line'>  ("k" helm-previous-line "up")
</span><span class='line'>  ("i" nil "cancel"))</span></code></pre></td></tr></table></div></figure>


<p>Then bind it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;; to escape
</span><span class='line'>(define-key helm-map (kbd "&lt;escape&gt;") 'helm-like-unite/body)
</span><span class='line'>;; or with key-chord.el; suggested by ReneFroger
</span><span class='line'>(key-chord-define minibuffer-local-map "jk" 'helm-like-unite/body)</span></code></pre></td></tr></table></div></figure>


<p>Now you can enter the <code>helm-like-unite</code> hydra with <code>escape</code> in helm and then use <code>j</code> and <code>k</code> to navigate up and down and <code>space</code> to mark candidates. Hydra even makes numbers work as digit arguments, so you can do <code>9k</code> as you would in vim. You can use <code>escape</code> to quit helm or <code>i</code> to return to normal functionality. Keys not mapped in a hydra will exit the hydra, so <code>return</code> and <code>tab</code> will have their normal behaviour. <code>?</code> will bring up helm&rsquo;s help. <code>/</code> will do whatever <code>C-s</code> would do for those selected buffers (e.g. <code>helm-buffers-run-multi-occur</code> or <code>helm-ff-run-grep</code>). <code>v</code> will describe the function, or preview the buffer/file, or go to a line (in helm occur), etc.</p>

<p>It&rsquo;s trivial to add more actions, for example binding <code>p</code> to <code>helm-copy-to-buffer</code> or <code>d</code> and <code>u</code> to <code>helm-next-page</code> and <code>helm-previous-page</code>. Here are some other suggestions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;; suggested by ReneFroger
</span><span class='line'>("h" helm-previous-source)
</span><span class='line'>("l" helm-next-source)
</span><span class='line'>;; suggested by Sylvain Benner (syl20bnr)
</span><span class='line'>;; if you want to use a key besides TAB to go to action select and then exit the hydra
</span><span class='line'>("r" helm-select-action :color blue)</span></code></pre></td></tr></table></div></figure>


<h2>Potential Problems</h2>

<p>A downside could be that it now takes two escapes to get out of helm unless you use a different key to enter the hydra (one escape to enter the hydra and one to then quit helm). Anyway, this will probably appeal mostly only to evil users. If you don&rsquo;t move up and down and mark specific candidates a lot in helm, this probably isn&rsquo;t worth it. I still think it&rsquo;s a cool example of hydra&rsquo;s simplicity.</p>

<h3>Update</h3>

<p>One annoyance is that helm will override the hydra help echo after a few seconds. However, hydra now has <a href="http://oremacs.com/2015/02/04/pre-hydra-post/">:pre and :post</a> which allow
you to, for example, change the color of the cursor when you&rsquo;re in the hydra to make it clear even after the echo disappears.</p>

<p>Hydra has also added the <a href="http://oremacs.com/2015/02/05/amaranth-hydra/">new color amaranth</a> that will change the default behaviour so that only blue heads (keys that are specified by the user to exit) will leave the hydra. This means that pressing unbound keys in the hydra won&rsquo;t exit the hydra. This may be the preferred behaviour for some.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I One-Space]]></title>
    <link href="http://angelic-sedition.github.io/blog/2014/09/21/why-i-one-space/"/>
    <updated>2014-09-21T23:46:12-04:00</updated>
    <id>http://angelic-sedition.github.io/blog/2014/09/21/why-i-one-space</id>
    <content type="html"><![CDATA[<p><a href="http://stevelosh.com/blog/2012/10/why-i-two-space/">Steve Losh&rsquo;s article</a> on using two spaces after a sentence continues to pop up, going mostly unchallenged it would seem. I personally fail to see any reason to use two spaces that isn&rsquo;t completely subjective and find his arguments otherwise to be self-defeating.</p>

<h2>His Arguments for Two Spaces</h2>

<ol>
<li>It looks better when using a monospaced font.</li>
<li>It gives the user more &ldquo;power&rdquo;</li>
</ol>


<h2>Two-Spacing is Pretty</h2>

<p>This is entirely subjective. I use monospaced fonts all the time and still think two spaces in between a sentence looks hideous.</p>

<h2>Two-Spacing Gives More Power?</h2>

<p>Okay so what about the non-trivial argument? Well, it seems to be the same as the argument he says is not convincing (less effort). His specific example for &ldquo;power&rdquo; only applies to vim users and only to some of them.</p>

<p>This is what happens when I type <code>das</code> in vim using his example.</p>

<p>Before with cursor above <code>t</code>:</p>

<p><code>Bob started speaking. Hello, Mr. Smi[t]h! How are you today?</code></p>

<p>After <code>das</code>:</p>

<p><code>Bob started speaking. How are you today?</code></p>

<p>It ends up looking exactly how I want. This is because I&rsquo;m using reedes&#8217; excellent <a href="https://github.com/reedes/vim-textobj-sentence">textobj-sentence</a> plugin that makes vim&rsquo;s <code>as</code> and <code>is</code> smarter. It even allows for adding custom abbreviations to ignore. As Losh says, we can have our cake and eat it too!</p>

<p>Granted, this plugin didn&rsquo;t exist at the time of the article&rsquo;s writing (though the idea isn&rsquo;t exactly hard to come up with). Even if this plugin did not currently exist, his argument is bunk. What is the benefit of being able to do things like <code>das</code>? If what is meant by power is not efficiency and saving keystrokes, effort, and time, then I&rsquo;ve no clue what the point is. Count how many times I&rsquo;ve used abbreviations in this post. You don&rsquo;t even have to count the number sentences to realize the number of extra keystrokes I would have had to type to put two spaces in between every sentence is exponentially greater than the single extra keystroke it would have taken me to deal with that abbreviation if I had needed to (the dot operator). So even if space is only half a percent of keystrokes typed, the number of keystrokes needed to deal with abbreviations is even more insignificant. So much for power.</p>

<p>As for parsing, this is merely a hypothetical. Has he ever needed to do that? I actually often use a script for counting sentences, and it&rsquo;s really not that difficult to deal with single spaced sentences like textobj-sentence does. A script that chose not to deal with it would suffer from the problem of not working with anything written by people who don&rsquo;t two-space. Unless this script needed to be absolutely perfect at counting, there would be no need to two-space sentences. This method of counting one-spaced sentences only fails in the rare case that a sentence actually does end with an abbreviation.</p>

<h2>Update (2015-09-08)</h2>

<p>Emacs users can find an equivalent of <code>vim-textobj-sentence</code> <a href="https://github.com/noctuid/emacs-sentence-navigation">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ranger as a Save Dialog]]></title>
    <link href="http://angelic-sedition.github.io/blog/2014/04/30/using-ranger-for-downloads/"/>
    <updated>2014-04-30T23:25:27-04:00</updated>
    <id>http://angelic-sedition.github.io/blog/2014/04/30/using-ranger-for-downloads</id>
    <content type="html"><![CDATA[<h3>Quick Round of Applause for Octopress</h3>

<p>Today I found the perfect excuse to start a blog when I stumbled across <a href="https://pages.github.com/">github pages</a> and <a href="http://octopress.org/">octopress</a>. It&rsquo;s something I&rsquo;ve been wanting to do for a while, but I never found blogger or wordpress to be that attractive. Finding out that I could easily host a blog on github and write all my posts in markdown was enough to git me to do it immediately. For a first post, I thought I&rsquo;d just start with presenting something basic I did recently to start using ranger for saving downloads.</p>

<h2>A More Universal Ranger</h2>

<p><a href="https://github.com/hut/ranger">Ranger</a> is the most efficient file manager I have come across. It already integrates easily enough most other programs. The browser is an exception and one due not to any fault of ranger. As far as I&rsquo;m aware, you have pretty much no choice in general when it comes to saving files using most gui browsers. When saving normally in most browsers, you are forced to deal with the dreaded gui save dialog. The best it has to offer you is <em><code>Recent Folders</code></em>, rudimentary tab completion, and the ability to open in the last directory you saved in. Forget support for bookmarks or decent keybindings; it&rsquo;s essentially the shittiest gui &ldquo;file manager&rdquo; in existence, and you don&rsquo;t even have the option to replace it as far as I know. I&rsquo;m not sure exactly what program is responsible for this save popup on GNU/Linux, but it seems to be independent of the browser itself as it is the same for different browsers. I find disturbing the lack of information or interest I could find in this clear conspiracy. Using the default popup can encourage either a pile up of your random, unorganized shit in a single folder or induce insanity due to the frustration involved in getting to the right directory. I&rsquo;ve wasted too much time in the past clicking through ten+ folders just to save one file.</p>

<p>Unsurprisingly, the gui save dialog has been unflinching and apathetic in spite of all my protesting. The obvious solution is to just stop using it and have things download automatically to the <code>~/Downloads</code> folder, for example, which is what I did for some time. It&rsquo;s quite easy after something has downloaded to open a terminal, type a two letter alias to <code>ranger ~/Downloads</code> and then cut and move the file. It doesn&rsquo;t take much time, but there are still intermediate steps that can be eliminated. Also, when I did this, I found myself never actually getting to moving the files to their appropriate locations resulting in the aforementioned pile up of unorganized crap.</p>

<p>My solution uses <a href="http://5digits.org/pentadactyl/">pentadactyl</a> to &ldquo;replace&rdquo; the default save dialog with ranger. Pentadactyl already eliminates the need for the gui save dialog with <code>:w</code> for saving webpages (or whatever else the current url is) and <code>;s</code> for download hinting. Path and file names can be specified with tab completion as well. Pentadactyl isn&rsquo;t the only way to do this (dwb, for example, has download hinting as well I believe), but we can do better still. Because pentadactyl has autocommands, we can do something like this:</p>

<pre><code>au DownloadPost * silent !~/bin/ranger/ranger_browser_fm.sh "&lt;file&gt;"
</code></pre>

<p>With this in place, every time something is downloaded in firefox, pentadactyl will pass the path/filename to the specified shell script. We can have this shell script then open ranger with that file already cut and ready to be moved. Making the command silent helps ensure that pentadactyl will not steal the focus back from ranger.</p>

<p>Here&rsquo;s an example shell script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>no_ap=$(echo "$1" | sed "s/'//g")
</span><span class='line'>mv "$1" "$no_ap"
</span><span class='line'>escaped=$(printf '%q' "$no_ap")
</span><span class='line'>bspc rule -a termite -o floating=true center=true
</span><span class='line'>termite -e "/bin/bash -c 'xdo resize -w +300 && xdo move -x -150 && xdo resize -h +200 && \
</span><span class='line'>  xdo move -y -100 && ranger --selectfile=""$escaped"" --cmd="cut"'" &</span></code></pre></td></tr></table></div></figure>


<p>The first part just strips the file name of apostrophes which will cause problems if left in. You may have trouble with other symbols. If so, you can either make sure not to include them in the filename when saving or remove them automatically in the script. The fourth line is specific to my window manager (bspwm) and sets things up so that the next time the terminal emulator termite is opened, it will be floating and centered. The last line opens termite, resizes it using xdo (which is not necessary and can be removed as well), and then opens ranger, selecting and cutting the file that was just downloaded.</p>

<p><em>This will look something like this (I went up to show that the file was successfully cut)</em>:
<img src="http://angelic-sedition.github.io/images/ranger_file_saver.png"></p>

<p>There is another problem with this. The more firefox windows you open, the more ranger instances will be started. For a while, I thought this was because pentadactyl has no <a href="https://groups.google.com/forum/#!topic/pentadactyl/rwrGG4njsq8">autocmd clearing mechanism</a>. Sourcing an autocommands file with <code>au Enter</code> won&rsquo;t fix this though. It happens because the DownloadPost autocmd will execute for every open window. I realized this because the following would still execute from a private window when called from the autocommand but not manually:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>command! -nargs=1 maybe-open-ranger &lt;&lt;EOF
</span><span class='line'>if !PrivateBrowsingUtils.isWindowPrivate(window)
</span><span class='line'>  silent !~/bin/ranger/ranger_browser_fm.sh &lt;args&gt;
</span><span class='line'>endif
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<p>See the <a href="https://github.com/5digits/dactyl/issues/29">pentadactyl issue</a> for a potential workaround. Also see my <a href="https://github.com/noctuid/dotfiles">dotfiles</a> for the full script (under <code>scripts/bin/ranger</code>) with a simpler workaround. It has extra features like adding an option to open downloads in dired (which can actually be faster than opening a new ranger session with the emacs daemon), ignoring files saved to <code>/tmp</code>, and allowing the ranger-opening behaviour to be toggled on and off. I&rsquo;ll also probably add functionality to sort files or take different actions based on the filetype (to ignore torrent files for example).</p>

<h2>Uploads</h2>

<p>Pentadactyl also provides a way to avoid using a gui for selecting a file for upload. If you can hint an upload button, pentadactyl will give you an <code>Upload:</code> prompt and allow you to select a file with tab completion. Alternatively, it is possible to yank the file path in ranger beforehand and paste this into either the pentadactyl or gui save dialog.</p>

<p>For some websites, I&rsquo;d rather use a cli program. I&rsquo;ve used <a href="https://github.com/mwunsch/tumblr">tumblr-rb</a> for tumblr uploads. Tumblr also allows you to <a href="https://www.tumblr.com/docs/en/posting">post by email</a> and even use markdown to do so. The <a href="https://code.google.com/p/imgur-cli/">imgur-cli</a> python script is useful for imgur uploads, and I&rsquo;ve added a keybinding for it in ranger. <a href="https://github.com/Profpatsch/imup">Imup</a> is pretty good for anon uploads to different image hosts as well. There is also <a href="https://github.com/mcrapet/plowshare">plowshare</a> for uploading to sites like mediafire.</p>

<p>I have not tried the following yet, but they may also be of use. For youtube, there are <a href="https://code.google.com/p/youtube-upload/">youtube-upload</a> and <a href="https://code.google.com/p/googlecl/">googlecl</a>. Googlecl is a lot more popular and does a lot more than just youtube (i.e. picasa uploads), and youtube-upload looks like it might require you to enter your password in the command. Googlecl is also in the official arch repos, so I&rsquo;d recommend it over youtube-upload. For facebook, <a href="https://github.com/dtompkins/fbcmd">fbcommand</a> allows uploading photos (and multiple photos at once as an album&hellip; as does googlecl with picasa by the way).</p>
]]></content>
  </entry>
  
</feed>
